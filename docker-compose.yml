
volumes:
  pgdata:
  minio_data:
  jarvis_data:

services:
  frontend:
    build: "./frontend"
    restart: unless-stopped
    container_name: jarvis-frontend
    ports:
      - 3000:3000
    environment: 
      AUTH0_SECRET: ${AUTH0_SECRET}
      AUTH0_BASE_URL: ${AUTH0_BASE_URL}
      AUTH0_ISSUER_BASE_URL: ${AUTH0_ISSUER_BASE_URL}
      AUTH0_CLIENT_ID: ${AUTH0_CLIENT_ID}
      AUTH0_CLIENT_SECRET: ${AUTH0_CLIENT_SECRET}
      PRIVATE_BACKEND_URL: ${PRIVATE_BACKEND_URL}
      PUBLIC_BACKEND_URL: ${PUBLIC_BACKEND_URL}
      DB_URI: ${DB_URI}
      AUTH0_API_AUDIENCE: ${AUTH0_API_AUDIENCE}
    depends_on:
      - backend

  backend:
    build: "./backend"
    restart: unless-stopped
    container_name: jarvis-backend
    ports:
      - 8000:8000
    environment: 
      PYTHONUNBUFFERED: 1
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
      HOST: ${HOST}
      GOOGLE_APPLICATION_CREDENTIALS: /creds/jarvis-backend.json
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      CUDA_VISIBLE_DEVICES: ${CUDA_VISIBLE_DEVICES}
      DB_URI: ${DB_URI}
      LLAMA_CLOUD_API_KEY: ${LLAMA_CLOUD_API_KEY}
      TAVILY_API_KEY: ${TAVILY_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      AUTH0_API_AUDIENCE: ${AUTH0_API_AUDIENCE}
      DOCUMENT_BUCKET: ${DOCUMENT_BUCKET}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_ENDPOINT_URL: ${AWS_ENDPOINT_URL}
      AUTH0_SECRET: ${AUTH0_SECRET}
    volumes:
      - jarvis_data:/tmp/jarvis
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/creds/jarvis-backend.json
    depends_on:
      - postgres
      - minio

  postgres:
    image: "pgvector/pgvector:pg17"
    restart: unless-stopped
    container_name: postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data

  minio:
    image: "minio/minio:RELEASE.2025-04-22T22-12-26Z-cpuv1"
    container_name: minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_SERVER_URL: ${MINIO_SERVER_URL}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"

  minio-init:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: ["sh", "/docker-entrypoint-initbucket.d/create_bucket.sh"]
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - ./create_bucket.sh:/docker-entrypoint-initbucket.d/create_bucket.sh
    restart: "no"
